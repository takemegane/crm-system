import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { getPrismaClient } from '@/lib/db'

// ÈùôÁöÑÁîüÊàê„ÇíÁÑ°Âäπ„Å´„Åó„Å¶ÂãïÁöÑ„É´„Éº„Éà„Å®„Åó„Å¶Êâ±„ÅÜ
export const dynamic = 'force-dynamic'
export const runtime = 'nodejs'

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Production schema migration API called')
    
    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÁ¢∫Ë™ç
    if (!process.env.DATABASE_URL) {
      console.log('‚ùå DATABASE_URL not available')
      return NextResponse.json({ error: 'Database not available' }, { status: 503 })
    }

    // Prisma„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂãïÁöÑÂàùÊúüÂåñ
    const prisma = getPrismaClient()
    if (!prisma) {
      console.log('‚ùå Prisma client not initialized')
      return NextResponse.json({ error: 'Prisma client not initialized' }, { status: 503 })
    }

    console.log('‚úÖ Prisma client ready')

    // Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØÔºàOWNERÊ®©Èôê„ÅÆ„ÅøÔºâ
    const session = await getServerSession(authOptions)
    if (!session || session.user.role !== 'OWNER') {
      console.log('‚ùå Permission denied - OWNER role required')
      return NextResponse.json({ error: 'OWNERÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô' }, { status: 403 })
    }

    console.log('‚úÖ OWNER permission confirmed')

    const migrationResults = []

    try {
      // 1. courseMapping „Éï„Ç£„Éº„É´„Éâ„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      console.log('üîç Checking if courseMapping field exists...')
      
      let courseMappingExists = false
      try {
        await prisma.$queryRaw`
          SELECT "courseMapping" FROM "Product" LIMIT 1
        `
        courseMappingExists = true
        console.log('‚úÖ courseMapping field already exists')
      } catch (error) {
        console.log('‚ÑπÔ∏è courseMapping field does not exist, will create it')
      }

      if (!courseMappingExists) {
        console.log('‚ûï Adding courseMapping field to Product table...')
        await prisma.$executeRaw`
          ALTER TABLE "Product" 
          ADD COLUMN "courseMapping" JSON
        `
        console.log('‚úÖ courseMapping field added successfully')
        migrationResults.push('Added courseMapping field to Product table')
      }

      // 2. categoryType „Éï„Ç£„Éº„É´„Éâ„ÅÆÁ¢∫Ë™ç„Å®COURSEÂûã„ÅÆËøΩÂä†
      console.log('üîç Checking categoryType field values...')
      
      const categories = await prisma.category.findMany({
        select: { id: true, name: true, categoryType: true }
      })

      console.log(`üìä Found ${categories.length} categories`)
      
      // COURSEÂûã„Ç´„ÉÜ„Ç¥„É™„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      const hasCourseCategories = categories.some(c => c.categoryType === 'COURSE')
      console.log(`üéì COURSE type categories exist: ${hasCourseCategories}`)

      // 3. „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÊï¥ÂêàÊÄßÁ¢∫Ë™ç
      console.log('üîç Verifying database integrity...')
      
      const [productCount, categoryCount, courseCount] = await Promise.all([
        prisma.product.count(),
        prisma.category.count(),
        prisma.course.count()
      ])

      migrationResults.push(`Database counts: ${productCount} products, ${categoryCount} categories, ${courseCount} courses`)

      // 4. „Çµ„É≥„Éó„É´„ÇØ„Ç®„É™„ÅßÂãï‰ΩúÁ¢∫Ë™ç
      console.log('üß™ Testing sample queries...')
      
      const sampleProducts = await prisma.product.findMany({
        take: 3,
        select: {
          id: true,
          name: true,
          price: true,
          categoryId: true,
          courseMapping: true
        }
      })

      console.log('‚úÖ Sample product query successful')
      migrationResults.push(`Sample query returned ${sampleProducts.length} products`)

      // 5. Âü∫Êú¨ÁöÑ„Å™„Ç´„ÉÜ„Ç¥„É™„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºà„Å™„Åë„Çå„Å∞‰ΩúÊàêÔºâ
      const physicalCategory = await prisma.category.findFirst({
        where: { categoryType: 'PHYSICAL' }
      })

      if (!physicalCategory) {
        console.log('üì¶ Creating default categories...')
        
        const defaultCategories = [
          {
            name: 'Êõ∏Á±ç„ÉªÊïôÊùê',
            description: 'ÂèÇËÄÉÊõ∏„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„ÄÅÂ≠¶ÁøíÁî®ÊïôÊùê„Å™„Å©',
            categoryType: 'PHYSICAL',
            sortOrder: 1
          },
          {
            name: '„Éá„Ç∏„Çø„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ',
            description: '„Ç™„É≥„É©„Ç§„É≥ÊïôÊùê„ÄÅÂãïÁîªË¨õÂ∫ß„ÄÅPDF„Éï„Ç°„Ç§„É´„Å™„Å©',
            categoryType: 'DIGITAL',
            sortOrder: 2
          }
        ]

        for (const catData of defaultCategories) {
          const existing = await prisma.category.findFirst({
            where: { name: catData.name }
          })
          
          if (!existing) {
            await prisma.category.create({
              data: { ...catData, isActive: true }
            })
            console.log(`‚úÖ Created category: ${catData.name}`)
            migrationResults.push(`Created category: ${catData.name}`)
          }
        }
      }

      console.log('üéâ Schema migration completed successfully')
      
      return NextResponse.json({
        success: true,
        message: 'Êú¨Áï™Áí∞Â¢É„ÅÆ„Çπ„Ç≠„Éº„Éû„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü',
        migrationResults,
        databaseCounts: {
          products: productCount,
          categories: categoryCount,
          courses: courseCount
        },
        sampleProducts: sampleProducts.map(p => ({
          name: p.name,
          price: p.price,
          hasCourseMapping: !!p.courseMapping
        })),
        timestamp: new Date().toISOString()
      })

    } catch (migrationError) {
      console.error('‚ùå Migration error:', migrationError)
      return NextResponse.json({
        error: 'Migration failed',
        details: migrationError instanceof Error ? migrationError.message : String(migrationError),
        migrationResults,
        timestamp: new Date().toISOString()
      }, { status: 500 })
    }

  } catch (error) {
    console.error('‚ùå Error in schema migration:', error)
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    )
  }
}