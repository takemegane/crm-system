generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  engineType    = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String
  role      String     @default("ADMIN")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]

  @@map("User")
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  nameKana     String?
  email        String        @unique
  phone        String?
  address      String?
  birthDate    DateTime?
  gender       String?
  password     String?
  isECUser     Boolean       @default(false)
  joinedAt     DateTime      @default(now())
  isArchived   Boolean       @default(false)
  archivedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cartItems    CartItem[]
  customerTags CustomerTag[]
  emailLogs    EmailLog[]
  enrollments  Enrollment[]
  orders       Order[]
}

model Course {
  id                String       @id @default(cuid())
  name              String
  description       String?
  price             Float
  duration          Int?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  communityLinkText String?
  communityLinkUrl  String?
  enrollments       Enrollment[]
}

model Enrollment {
  id         String   @id @default(cuid())
  customerId String
  courseId   String
  enrolledAt DateTime @default(now())
  status     String   @default("ACTIVE")
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, courseId])
}

model Tag {
  id           String        @id @default(cuid())
  name         String        @unique
  color        String?       @default("#3B82F6")
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customerTags CustomerTag[]
}

model CustomerTag {
  id         String   @id @default(cuid())
  customerId String
  tagId      String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([customerId, tagId])
}

model EmailTemplate {
  id        String     @id @default(cuid())
  name      String
  subject   String
  content   String
  isActive  Boolean    @default(true)
  isDefault Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  emailLogs EmailLog[]
}

model EmailLog {
  id             String         @id @default(cuid())
  templateId     String?
  customerId     String?
  subject        String
  content        String
  recipientEmail String
  recipientName  String?
  status         String         @default("PENDING")
  sentAt         DateTime?
  errorMessage   String?
  createdAt      DateTime       @default(now())
  customer       Customer?      @relation(fields: [customerId], references: [id])
  template       EmailTemplate? @relation(fields: [templateId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  userName  String?
  action    String
  entity    String?
  entityId  String?
  oldData   String?
  newData   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailSettings {
  id          String   @id @default(cuid())
  smtpHost    String   @default("smtp.gmail.com")
  smtpPort    Int      @default(587)
  smtpUser    String?
  smtpPass    String?
  fromAddress String?
  fromName    String   @default("CRM管理システム")
  signature   String?
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SystemSettings {
  id                String   @id @default(cuid())
  systemName        String   @default("CRM管理システム")
  logoUrl           String?
  faviconUrl        String?
  primaryColor      String   @default("#3B82F6")
  secondaryColor    String   @default("#1F2937")
  backgroundColor   String   @default("#F8FAFC")
  description       String?
  communityLinkText String?
  communityLinkUrl  String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  categoryType String        @default("PHYSICAL")
  isActive     Boolean       @default(true)
  sortOrder    Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  products     Product[]
  shippingRate ShippingRate?
}

model Product {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Float
  stock         Int         @default(0)
  imageUrl      String?
  categoryId    String?
  sortOrder     Int         @default(0)
  isActive      Boolean     @default(true)
  courseMapping Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category?   @relation(fields: [categoryId], references: [id])
}

model CartItem {
  id         String   @id @default(cuid())
  customerId String
  productId  String
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
}

model Order {
  id              String      @id @default(cuid())
  customerId      String
  orderNumber     String      @unique
  subtotalAmount  Float       @default(0)
  shippingFee     Float       @default(0)
  totalAmount     Float
  status          String      @default("PENDING")
  shippingAddress String?
  recipientName   String?
  contactPhone    String?
  notes           String?
  cancelledAt     DateTime?
  cancelledBy     String?
  cancelReason    String?
  orderedAt       DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@map("Order")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  productName String
  price       Float
  quantity    Int
  subtotal    Float
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
}

model ShippingRate {
  id                    String    @id @default(cuid())
  categoryId            String?   @unique
  shippingFee           Float     @default(0)
  freeShippingThreshold Float?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  category              Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}
